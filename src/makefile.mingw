# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2013 Primecoin Developers
# Distributed under the conditional MIT/X11 software license,
# see the accompanying file COPYING.

# Makefile for the MinGW g++ compiler/toolchain
#
# Assumes Berkeley DB, Boost, and OpenSSL have all been compiled and installed
# into /usr/local (/usr/local/include, /usr/local/lib).
#
# If dependencies are somewhere else, run 'make DEPSDIR=/path/'
#
# Boost libraries are given wacky names that include the particular version of
# boost you're using; set BOOST_SUFFIX appropriately.
#
# 'make clean' assumes it is running inside a MSYS shell, and uses 'rm'
# to remove files.

#CXX ?= g++
CXX ?= x86_64-w64-mingw311-g++

USE_UPNP:=-
USE_IPV6:=1

#DEPSDIR?=/usr/local
#BOOST_SUFFIX?=-mgw46-mt-sd-1_54
BOOST_SUFFIX?=-mgw48-mt-sd-1_54


 INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"c:/data/miner2/deps/boost_1_54_0" \
 -I"c:/data/miner2/deps/boost_1_54_0/boost" \
 -I"c:/data/miner2/deps/boost_1_54_0/boost/algorithm/string/" \
 -I"c:/data/miner2/deps/boost_1_54_0/libs" \
 -I"c:/data/miner2/deps/boost_1_54_0/stage/lib" \
 -I"c:/data/miner2/deps/db-4.8.30.NC/build_unix" \
 -I"c:/data/miner2/deps/openssl-1.0.1e/include" \
 -I"c:/data/miner2/deps/gmpcore510/include" \
 -I"c:/data/miner2/deps"

LIBPATHS= \
 -L"$(CURDIR)/leveldb" \
 -L"c:/data/miner2/deps/boost_1_54_0/stage/lib" \
 -L"c:/data/miner2/deps/db-4.8.30.NC/build_unix" \
 -L"c:/data/miner2/deps/openssl-1.0.1e" \
 -L"c:/data/miner2/deps/gmpcore510/lib"

LIBS= \
 -l leveldb \
 -l memenv \
 -l boost_system$(BOOST_SUFFIX) \
 -l boost_filesystem$(BOOST_SUFFIX) \
 -l boost_program_options$(BOOST_SUFFIX) \
 -l boost_thread$(BOOST_SUFFIX) \
 -l boost_chrono$(BOOST_SUFFIX) \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l gmp

DEFS=-D_MT -DWIN32_LEAN_AND_MEAN -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DBOOST_USE_WINDOWS_H
DEBUGFLAGS=-g
CFLAGS=-march=core2 -mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
# enable: ASLR, DEP and large address aware
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
 LIBS += -l miniupnpc -l iphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi -l m

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    leveldb/libleveldb.a \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/hash.o \
    obj/bloom.o \
    obj/noui.o \
    obj/leveldb.o \
    obj/txdb.o \
    obj/prime.o \
    obj/checkpointsync.o


all: primecoind.exe

test check: test_primecoin.exe FORCE
	test_primecoin.exe

#
# LevelDB support
#
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)

leveldb/libleveldb.a:
	cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(CFLAGS)" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

primecoind.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_primecoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)

clean:
	rm -f primecoind.exe test_primecoin.exe
	rm -f obj/*
	rm -f obj-test/*
	cd leveldb && $(MAKE) TARGET_OS=NATIVE_WINDOWS clean && cd ..

FORCE:
